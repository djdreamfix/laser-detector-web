// Laser Receiver Web Pro v2 - dynamic green threshold + robust audio
const video=document.getElementById('video'), canvas=document.getElementById('canvas'), ctx=canvas.getContext('2d');
const cameraSelect=document.getElementById('cameraSelect'), startBtn=document.getElementById('startBtn');
const thresholdInput=document.getElementById('threshold'), laserColor=document.getElementById('laserColor');
const directionEl=document.getElementById('direction'), hintEl=document.getElementById('hint'), soundBtn=document.getElementById('soundBtn');
const ledGreen=document.getElementById('led-green'), ledRed=document.getElementById('led-red');
const segTop=document.getElementById('seg-top'), segCenter=document.getElementById('seg-center'), segBottom=document.getElementById('seg-bottom');
let stream=null, detecting=false, soundEnabled=true, audioReady=false, audioCtx=null, oscHigh=null, oscLow=null, oscConst=null;
const SETTINGS_KEY='laser_receiver_settings_v2';
let settings={threshold:160, color:'green', deviceId:null, sound:true};
try{ const s=JSON.parse(localStorage.getItem(SETTINGS_KEY)); if(s) settings=Object.assign(settings,s); }catch(e){}
thresholdInput.value=settings.threshold; laserColor.value=settings.color; soundEnabled=settings.sound; updateSoundButton();
function updateSoundButton(){ soundBtn.textContent = soundEnabled ? 'üîä –ó–≤—É–∫: —É–≤—ñ–º–∫.' : 'üîá –ó–≤—É–∫: –≤–∏–º–∫.'; settings.sound=soundEnabled; localStorage.setItem(SETTINGS_KEY, JSON.stringify(settings)); }
soundBtn.onclick=()=>{ soundEnabled=!soundEnabled; if(!soundEnabled) stopAllTones(); updateSoundButton(); };
thresholdInput.oninput=()=>{ settings.threshold=parseInt(thresholdInput.value); localStorage.setItem(SETTINGS_KEY, JSON.stringify(settings)); };
laserColor.onchange=()=>{ settings.color=laserColor.value; localStorage.setItem(SETTINGS_KEY, JSON.stringify(settings)); };
function prepareAudio(){ if(audioReady) return; try{ audioCtx=new (window.AudioContext||window.webkitAudioContext)(); function mk(freq){ const o=audioCtx.createOscillator(); const g=audioCtx.createGain(); o.type='sine'; o.frequency.value=freq; g.gain.value=0; o.connect(g); g.connect(audioCtx.destination); o.start(); return {o,g}; } oscHigh=mk(880); oscLow=mk(440); oscConst=mk(600); audioReady=true; if(audioCtx.state==='suspended') audioCtx.resume().catch(()=>{}); }catch(e){ audioReady=false; console.warn('audio prepare failed', e); } }
function setTone(t,vol){ if(!audioReady||!t) return; try{ t.g.gain.cancelScheduledValues(0); t.g.gain.setValueAtTime(vol, audioCtx.currentTime+0.01); }catch(e){} }
function stopTone(t){ if(!audioReady||!t) return; try{ t.g.gain.setValueAtTime(0, audioCtx.currentTime+0.01); }catch(e){} }
function stopAllTones(){ stopTone(oscHigh); stopTone(oscLow); stopTone(oscConst); ledGreen.classList.remove('led-on'); ledRed.classList.remove('led-on'); clearBlink(); }
async function listCameras(){ try{ const devices=await navigator.mediaDevices.enumerateDevices(); const cams=devices.filter(d=>d.kind==='videoinput'); cameraSelect.innerHTML=''; cams.forEach((c,i)=>{ const opt=document.createElement('option'); opt.value=c.deviceId; opt.textContent=c.label||`Camera ${i+1}`; cameraSelect.appendChild(opt); }); if(settings.deviceId) cameraSelect.value=settings.deviceId;}catch(e){console.warn(e);} }
cameraSelect.onchange=()=>{ settings.deviceId=cameraSelect.value; localStorage.setItem(SETTINGS_KEY, JSON.stringify(settings)); if(detecting) restartStream(); }
async function startStream(deviceId){ stopStream(); try{ stream = await navigator.mediaDevices.getUserMedia({ video: deviceId?{ deviceId:{ exact: deviceId } } : { facingMode:'environment' }, audio:false }); video.srcObject=stream; await video.play(); canvas.width = video.videoWidth || 640; canvas.height = video.videoHeight || 480; return true; }catch(e){ console.error('camera start failed',e); return false; } }
function stopStream(){ if(stream) stream.getTracks().forEach(t=>t.stop()); stream=null; video.srcObject=null; }
async function restartStream(){ await startStream(cameraSelect.value); }
startBtn.onclick=async ()=>{ if(!detecting){ await listCameras(); prepareAudio(); const ok=await startStream(cameraSelect.value); if(!ok){ directionEl.textContent='–ü–æ–º–∏–ª–∫–∞ –∫–∞–º–µ—Ä–∏'; return; } detecting=true; startBtn.textContent='–°—Ç–æ–ø'; directionEl.textContent='–ü–æ—à—É–∫...'; detectLoop(); } else { detecting=false; startBtn.textContent='–°—Ç–∞—Ä—Ç'; directionEl.textContent='–ó—É–ø–∏–Ω–µ–Ω–æ'; stopStream(); stopAllTones(); segTop.style.background='rgba(255,255,255,0.03)'; segCenter.style.background='rgba(255,255,255,0.03)'; segBottom.style.background='rgba(255,255,255,0.03)'; } };
function analyzeFrame(){ if(!video||video.readyState<2) return null; ctx.drawImage(video,0,0,canvas.width,canvas.height); const img=ctx.getImageData(0,0,canvas.width,canvas.height); const data=img.data; const w=canvas.width, h=canvas.height; const slotW=Math.floor(w*0.28); const cx=Math.floor(w/2); const left=Math.floor(cx-slotW/2); const right=left+slotW; const zoneH=Math.max(4, Math.floor(h*0.12)); const centerY=Math.floor(h/2); const topY=Math.floor(centerY-zoneH*1.5); const bottomY=Math.floor(centerY+zoneH*0.5); let ambient=0, samp=0; for(let i=0;i<data.length;i+=4*200){ const r=data[i], g=data[i+1], b=data[i+2]; ambient += (0.2126*r + 0.7152*g + 0.0722*b); samp++; } ambient = samp? Math.round(ambient/samp) : 120; const baseThreshold = parseInt(thresholdInput.value); const dynamicGreenThreshold = Math.max(100, Math.min(220, Math.round(baseThreshold - (ambient-120)*0.2))); const threshold = laserColor.value==='green' ? dynamicGreenThreshold : baseThreshold; function zoneCount(yStart){ let cnt=0; for(let y=yStart;y<yStart+zoneH;y++){ if(y<0||y>=h) continue; for(let x=left;x<right;x+=3){ const i=(y*w+x)*4; const r=data[i], g=data[i+1], b=data[i+2]; if(laserColor.value==='green'){ if(g>threshold && g>r*1.8 && g>b*1.8) cnt++; } else { if(r>threshold && r>g*1.8 && r>b*1.8) cnt++; } } } return cnt; } const topC=zoneCount(Math.max(0,topY)); const centerC=zoneCount(Math.max(0,centerY)); const bottomC=zoneCount(Math.max(0,bottomY)); return {topC,centerC,bottomC,ambient,threshold}; }
let lastState='neutral', blinkTimer=null;
function setLEDs(state){ ledGreen.classList.remove('led-on'); ledRed.classList.remove('led-on'); segTop.style.background='rgba(255,255,255,0.03)'; segCenter.style.background='rgba(255,255,255,0.03)'; segBottom.style.background='rgba(255,255,255,0.03)'; if(state==='center'){ ledGreen.classList.add('led-on'); segCenter.style.background='linear-gradient(90deg, rgba(0,255,102,0.12), rgba(0,255,102,0.06))'; } else if(state==='up'){ ledRed.classList.add('led-on'); segTop.style.background='linear-gradient(90deg, rgba(255,77,77,0.12), rgba(255,77,77,0.06))'; } else if(state==='down'){ ledRed.classList.add('led-on'); segBottom.style.background='linear-gradient(90deg, rgba(255,77,77,0.12), rgba(255,77,77,0.06))'; } }
function clearBlink(){ if(blinkTimer) clearInterval(blinkTimer); blinkTimer=null; segTop.style.opacity=1; segCenter.style.opacity=1; segBottom.style.opacity=1; }
function visualLedWhenSoundOff(state){ clearBlink(); if(soundEnabled){ segTop.style.opacity=1; segCenter.style.opacity=1; segBottom.style.opacity=1; return; } if(state==='center'){ let t=0; blinkTimer=setInterval(()=>{ t=(t+1)%40; segCenter.style.opacity = 0.6 + 0.4*Math.abs(Math.sin(t/6)); },80); } else if(state==='up' || state==='down'){ let seg = state==='up'?segTop:segBottom; let t=0; blinkTimer=setInterval(()=>{ t=(t+1)%30; seg.style.opacity = 0.5 + 0.5*Math.abs(Math.sin(t/4)); },70); } }
function detectLoop(){ if(!detecting) return; const res=analyzeFrame(); if(!res){ requestAnimationFrame(detectLoop); return; } const total=res.topC+res.centerC+res.bottomC; const strongest=Math.max(res.topC,res.centerC,res.bottomC); const minPixels=6; const centerBias=1.3; let state='neutral'; if(total>=minPixels){ if(res.centerC>=strongest*centerBias && res.centerC>res.topC && res.centerC>res.bottomC) state='center'; else if(res.topC===strongest) state='up'; else if(res.bottomC===strongest) state='down'; } else state='neutral'; if(state!==lastState){ lastState=state; if(state==='center'){ directionEl.textContent='–†–Ü–í–ï–ù–¨'; directionEl.className='status level'; hintEl.textContent=`–õ–∞–∑–µ—Ä —É —Ü–µ–Ω—Ç—Ä—ñ ‚Äî –ø–æ—Ä—ñ–≥ ${res.threshold}, –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è ${res.ambient}`; if(soundEnabled && audioReady) setTone(oscConst,0.02); visualLedWhenSoundOff('center'); setLEDs('center'); } else if(state==='up'){ directionEl.textContent='–í–ò–©–ï ‚Üí –æ–ø—É—Å—Ç–∏ –ø—Ä–∏–π–º–∞—á'; directionEl.className='status up'; hintEl.textContent=`–õ–∞–∑–µ—Ä –≤–∏—â–µ —Ü–µ–Ω—Ç—Ä—É ‚Äî –ø–æ—Ä—ñ–≥ ${res.threshold}`; if(soundEnabled && audioReady) setTone(oscHigh,0.015); visualLedWhenSoundOff('up'); setLEDs('up'); } else if(state==='down'){ directionEl.textContent='–ù–ò–ñ–ß–ï ‚Üí –ø—ñ–¥–Ω—ñ–º–∏ –ø—Ä–∏–π–º–∞—á'; directionEl.className='status up'; hintEl.textContent=`–õ–∞–∑–µ—Ä –Ω–∏–∂—á–µ —Ü–µ–Ω—Ç—Ä—É ‚Äî –ø–æ—Ä—ñ–≥ ${res.threshold}`; if(soundEnabled && audioReady) setTone(oscLow,0.015); visualLedWhenSoundOff('down'); setLEDs('down'); } else { directionEl.textContent='–û—á—ñ–∫—É–≤–∞–Ω–Ω—è...'; directionEl.className='status neutral'; hintEl.textContent='–ù–∞–≤–µ–¥i—Ç—å –ª–∞–∑–µ—Ä –Ω–∞ –≤—ñ–∫–Ω–æ –ø—Ä–∏–π–º–∞—á–∞'; stopAllTones(); visualLedWhenSoundOff('neutral'); setLEDs('neutral'); } } requestAnimationFrame(detectLoop); }
window.addEventListener('beforeunload', ()=>{ stopStream(); if(audioReady) audioCtx.close().catch(()=>{}); });